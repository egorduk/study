security:
    access_denied_url: /unauthorized
    firewalls:
        #secure:
        #    access_denied_url: /unauthorized
        #    pattern:  ^/
        #    anonymous: ~
        #    security: true

        #test:
         #   access_denied_url: /unauthorized
            #provider: user_db
          #  pattern:    ^/secure/client/$
           # anonymous: ~
            #user: true
            #security: true
            #http_basic: ~
            #    realm: "Secured Demo Area"
            #    provider: user_db


        secured_area:
            #access_denied_url: /unauthorized
           #access_denied_handler: some.service.id
            pattern:    ^/secure/*
            anonymous: ~
            http_basic:
                realm: "Secured Area"
                #provider: user_db
            #stateless: true
            logout:
                path:   /logout
                target: client_index
                invalidate_session: true
            #security: true
            #form_login:
            #    login_path: client_login
            #form_reg:
            #    login_path: client_reg
    #acl:
    #    connection: default

    access_control:
       # - { path: ^/client/reg, roles: IS_AUTHENTICATED_ANONYMOUSLY }
       # - { path: ^/client/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
       # - { path: ^/client/index, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/secure/client/index, roles: ROLE_CLIENT }

    encoders:
        Acme\AuthBundle\Entity\User:
            { algorithm: sha512, encode-as-base64: true, iterations: 10 }

    providers:
           user_db:
                entity: { class: Acme\AuthBundle\Entity\User, property: login }
    role_hierarchy:
        #ROLE_ADMIN: ROLE_ADMIN
        ROLE_CLIENT: ROLE_CLIENT
        ROLE_AUTHOR: ROLE_AUTHOR
        #ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]