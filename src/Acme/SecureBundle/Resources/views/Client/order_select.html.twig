{% extends "AcmeSecureBundle::layout_client.html.twig" %}
{% block title "Просмотр заказа" %}
    {% block content %}
        <link rel="stylesheet" href="{{ asset('bundles/css/jqgrid/custom-theme1/jquery-ui-1.10.3.custom.min.css') }}" />
        <link rel="stylesheet" href="{{ asset('bundles/css/jqgrid/ui.jqgrid.css') }}" />
        <link rel="stylesheet" href="{{ asset('bundles/css/chat/main.css') }}" />
        <link rel="stylesheet" href="{{ asset('bundles/css/modal_window/jquery.alert.css') }}" />
        <script type="text/javascript" src="{{ asset('bundles/js/jquery.cookie.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/js/jqgrid/i18n/grid.locale-ru.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/js/jqgrid/jquery.jqGrid.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/js/jqgrid/jquery.jqGrid.fmatter.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/js/sound/ion.sound.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/js/modal_window/jquery.alert.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/js/bootstrap-maxlength.min.js') }}"></script>
        <script type="text/javascript" src="{{ asset('bundles/js/price-format.js') }}"></script>
        <script src="http://localhost:8008/socket.io/socket.io.js" defer></script>
        <style>
            .col-md-2 {
                display: none;
            }
            .grid-cell-time {
                color: blue;
            }
            .ui-jqgrid .ui-jqgrid-htable th div {
                height: 21px;
            }
            .label-primary {
                background-color: #0088cc;
            }
            .thumbnail {
                margin-bottom: 7px;
            }
            .ui-widget-content a, .ui-widget-content .ui-state-highlight a, .ui-widget-content .ui-state-hover a {
                color: white;
            }
            #dialog-message-select-bid p .icon-hammer, #dialog-message-success-auction p .icon-hammer {
                font-size: 45px;
                color: green;
            }
            #dialog-message-select-bid, #dialog-message-error, .cancel-bid, #dialog-message-auction-bid, #dialog-message-success-auction  {
                display: none;
            }
            #dialog-message-error p .icon-warning {
                font-size: 45px;
                color: orange;
            }
            #ui-id-2 {
                color: orange;
            }
            #ui-id-1, .class-dialog-success-auction #ui-id-2 {
                color: green;
            }
            .grid-cell-day {
                color: blue;
                font-size: 20px;
            }
            .grid-cell-comment {
                font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
                font-style: italic;
            }
            .bootstrap-error {
                border-color: #E9322D!important;
                box-shadow: 0 0 6px #E9322D!important;
            }
            .block-theme {
                font-size: 18px;
            }
            .block-num {
                font-size: 20px;
                color: green;
            }
            hr {
                margin: 3px;
            }
            .ui-jqgrid tr.jqgrow td {
                font-size: 18px !important;
            }
            .Message {
                position: relative;
            }*
             .Message-body {
                 font-size: 18px;
             }
            #modal-window-success-auction, #window-error-cancel-bid {
                display: none;
            }
            .block-file{
                border: 1px solid #000000;
                width: 300px;
            }
            .volume-on, .volume-off {
                cursor: pointer;
                color: green;
                display: none;
            }
            .volume-off {
                color: red;
            }
            .system {
                background-color: lemonchiffon;
            }
            textarea {
                resize: none;
                overflow: auto;
            }
            .modal-dialog {
                width: 400px !important;
            }
            .ui-tabs-vertical { width: 55em; }
            .ui-tabs-vertical .ui-tabs-nav { padding: .2em .1em .2em .2em; float: left; width: 12em; }
            .ui-tabs-vertical .ui-tabs-nav li { clear: left; width: 100%; border-bottom-width: 1px !important; border-right-width: 0 !important; margin: 0 -1px .2em 0; }
            .ui-tabs-vertical .ui-tabs-nav li a { display:block; }
            .ui-tabs-vertical .ui-tabs-nav li.ui-tabs-active { padding-bottom: 0; padding-right: .1em; border-right-width: 1px; }
            .ui-tabs-vertical .ui-tabs-panel { padding: 1em; float: right; width: 40em;}
            #tabs li .ui-icon-close { float: left; margin: 0.4em 0.2em 0 0; cursor: pointer; }
            .state-selected:hover, .state-selected { color: white; background: green; border: 1px solid green; }
            .state-selected .grid-cell-day, .state-selected .grid-cell-time { color: white; }
            .chat-wrap .new { background-color: orange; }
        </style>
        <div class="container">
            <!--<div class="row">
                <div id="modal-window-success-auction">
                    <div id="success-window">
                        <div class="Message Message--green" id="js-timer">
                            <div class="Message-icon">
                                <i class="fa fa-check"></i>
                            </div>
                            <div class="Message-body">
                                <p align="center">Торг предложен!</p>
                            </div>
                            <button class="Message-close js-messageClose"><i class="fa fa-times"></i></button>
                        </div>
                    </div>
                </div>
                <div id="window-error-cancel-bid">
                    <div id="success-window">
                        <div class="Message Message--red" id="js-timer">
                            <div class="Message-icon">
                                <i class="icon-cancel-6"></i>
                            </div>
                            <div class="Message-body">
                                <p align="center">Автор уже принял ставку!</p>
                            </div>
                            <button class="Message-close js-messageClose"><i class="fa fa-times"></i></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-7">
                    <div id="blockAboutOrder" style="margin-bottom: 40px">
                        <p class="block-num">Номер заказа: {{ obj.order.num }}</p>
                        <hr style="border:solid 1px black">
                        <p class="block-theme">Тема работы: {{ obj.order.theme }}</p>
                        <hr style="border:solid 1px black">
                        <p>Задание: {{ obj.order.task | raw }}</p>
                        <hr style="border:solid 1px black">
                        <p>Объем работы: {{ obj.order.countsheet }} стр.</p>
                        <hr style="border:solid 1px black">
                        <p>Оригинальность работы: {{ obj.order.originality }}%</p>
                        <hr style="border:solid 1px black">
                        <p>Предмет: {{ obj.order.subjectorder.childname }}</p>
                        <hr style="border:solid 1px black">
                        <p>Тип работы: {{ obj.order.typeorder.name }}</p>
                        <hr style="border:solid 1px black">
                        <p>Статус заказа: {{ obj.order.statusorder.name }}</p>
                        <hr style="border:solid 1px black">
                        <p>Дата создания заказа: {{ obj.order.datecreate.format("d.m.Y H:i") }}</p>
                        <hr style="border:solid 1px black">
                        <p>Выполнение заказа до: {{ obj.order.dateexpire.format("d.m.Y H:i") }}</p>
                        <hr style="border:solid 1px black">
                        <div>
                            {% for file in obj.files %}
                                <div class="block-file">
                                    <p>Файл: {{ file.name }} </p>
                                    <p>Размер: {{ file.size }} </p>
                                    <p>Загружен: {{ file.dateupload.format("d.m.Y H:i") }} </p>
                                    <p><a href="{{ folder }}{{ file.name }}">Ссылка<a/></p>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                </div>
            </div>-->
            <!--<div id="dialog-message-select-bid" title="Выбор ставки">
                <p>
                    <span class="icon-hammer" style="float:left; margin:0 7px 50px 0;"></span>
                    Вы уверены, что согласны с выбранной ставкой исполнителя?
                </p>
            </div>
            <div id="dialog-message-error" title="Уведомление">
                <p>
                    <span class="icon-warning" style="float:left; margin:0 7px 50px 0;"></span>
                    Заказ удален, обновите таблицу со ставками либо страницу!
                </p>
            </div>-->
            <div class="modal fade" id="modal-auction-bid" tabindex="-1" role="dialog" aria-labelledby="modal-label" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title" id="modal-label">Предложить торг</h4>
                        </div>
                        <div class="modal-body">
                            <div class="form-group" id="comment">
                                <label for="comment-text">Предложить цену:</label>
                                <div class="input-group">
                                    <input type="text" name="auction-price" id="auction-price" required placeholder="Введите цену" class="form-control" data-toggle="tooltip" data-placement="top" data-trigger="manual" title="Введите числа" data-title="Только числа!" maxlength="7">
                                    <span class="input-group-addon"><i class="icon-rouble"></i></span>
                                </div>
                            </div>
                            <div class="form-group" id="degree">
                                <label>Предложить дней на выполнение:</label>
                                <div class="input-group">
                                    <input type="text" name="auction-day" id="auction-day" required placeholder="Введите количество дней" class="form-control" data-toggle="tooltip" data-placement="top" data-trigger="manual" title="Введите числа" data-title="Только числа!" maxlength="3">
                                    <span class="input-group-addon"><i class="icon-clock-5"></i></span>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" id="btn-auction-bid-confirm">Предложить</button>
                            <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                        </div>
                    </div>
                </div>
            </div>
            <table id="listBids"></table>
            <div id="pagerBids"></div>
            <div id="tabs">
                <ul>
                </ul>
            </div>
            <!--<div class="modal fade" id="modal-confirm-work" tabindex="-1" role="dialog" aria-labelledby="modal-label" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title" id="modal-label">Принять работу</h4>
                        </div>
                        <div class="modal-body">
                            <div class="form-group" id="comment">
                                <label for="comment-text">Комментарий:</label>
                                <textarea id="comment-text" class="form-control" maxlength="100" name="comment-text" rows="3" cols="52"></textarea>
                            </div>
                            <div class="form-group" id="degree">
                                <label>Оценка:</label>
                                <div id="degree-dig">
                                    <label class="radio-inline">
                                        <input type="radio" name="degree" id="" value="1"> 1
                                    </label>
                                    <label class="radio-inline">
                                        <input type="radio" name="degree" id="" value="2"> 2
                                    </label>
                                    <label class="radio-inline">
                                        <input type="radio" name="degree" id="" value="3"> 3
                                    </label>
                                    <label class="radio-inline">
                                        <input type="radio" name="degree" id="" value="4"> 4
                                    </label>
                                    <label class="radio-inline">
                                        <input type="radio" name="degree" id="" checked value="5"> 5
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" id="btn-action-confirm-work" data-dismiss="modal">Принять</button>
                            <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                        </div>
                    </div>
                </div>
            </div>-->

            <script>
                $(document).ready(function() {
                    var userLogin = '{{ obj.userLogin }}',
                            orderId = {{ obj.order.id }},
                            userId = {{ obj.userId }},
                            authorStatus = {{ obj.author.status }},
                            //authorLogin = '{{ obj.author.login }}',
                            authorLogin,
                            btnActionConfirmWork = $("#btn-action-confirm-work"),
                            btnConfirmWork = $("#btn-confirm-work"),
                            flagIsWriting = 0,
                            mode = false,
                            channel,
                            currTab,
                            isNewMessage = 0,
                            countOpenChat = 0,
                            flagOpenChat = 0,
                            arrOpenChat = [],
                            arrUsedChat = [],
                            patternCheckEmail = /([a-z0-9_-]+\.)*[a-z0-9_-]+(@|sobaka|_|собака)[a-z0-9_-]+(\.[a-z0-9_-]+)*\.[a-z]{2,6}/i,
                            patternCheckPhone = /((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,16}/i;

                    var  tabContent = $( "#tab_content" ),
                            tabTemplate = "<li><a href='#{href}'>#{label}</a><span class='ui-icon ui-icon-close' role='presentation'>Remove Tab</span></li>",
                            tabs = $("#tabs");
                    tabs.tabs({
                        activate: function(e, ui) {
                            channel = ui.newPanel.attr('id');
                            currTab = tabs.find("#" + channel);
                            setFocusOnMessageField();
                        }
                    }).addClass("ui-tabs-vertical ui-helper-clearfix");
                    tabs.find(".ui-tabs-nav").sortable({
                        axis: "y",
                        stop: function() {
                            tabs.tabs("refresh");
                        }
                    });
                    tabs.find("li").removeClass("ui-corner-top").addClass("ui-corner-left");
                    tabs.delegate("span.ui-icon-close", "click", function() {
                        var panelId = $(this).closest("li").remove().attr("aria-controls");
                        $("#" + panelId).remove();
                        disconnectUser(panelId);
                        arrOpenChat[panelId].disconnect();
                        delete arrUsedChat[panelId];
                        delete arrOpenChat[panelId];
                        tabs.tabs("refresh");
                    });
                    /*tabs.bind("keyup", function(event) {
                        if (event.altKey && event.keyCode === $.ui.keyCode.BACKSPACE) {
                            var panelId = tabs.find(".ui-tabs-active").remove().attr("aria-controls");
                            $("#" + panelId).remove();
                            tabs.tabs("refresh");
                        }
                    });*/
                    function addTab(a, b) {
                        var label = b, id = a, li;
                        li = $(tabTemplate.replace(/#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label));
                        tabs.find(".ui-tabs-nav").append(li);
                        tabs.append("<div id='" + id + "'>" +
                                "<div class='block-chat'>" +
                                "<div class='chat-wrap'>" +
                                "<div class='messages-wrap'></div>" +
                                "<div id='panel'>" +
                                "<span class='nick'></span>" +
                                "<textarea class='message-text'></textarea>" +
                                "<button type='button' class='btn-send-msg btn btn-primary disabled'>Send</button></div>" +
                                "<div id='sidebar'><div class='count-msg'></div>" +
                                "<div id='online'>" +
                                "<p style='display: none' id='author-status'>{{ obj.author.login }}</p></div>" +
                                "<div class='in-chat' class='hidden'>" +
                                "<p>В чате</p></div>" +
                                "<div class='is-writing'></div>" +
                                "<span class='icon-volume-1 volume-on'></span>" +
                                "<span class='icon-volume-off-4 volume-off'></span></div></div>");
                        tabs.tabs("refresh");
                        tabs.tabs('option', 'active', -1);
                    }
                    /*btnConfirmWork.removeClass('disabled');
                    $("#comment-text").maxlength({
                        alwaysShow: true
                    });*/
                    $('.chat-wrap .nick').text(userLogin);
                    ion.sound({
                        sounds: [
                            {name: "button_tiny"}
                        ],
                        path: "{{ asset('bundles/js/sound/sounds/') }}",
                        preload: true,
                        volume: 1.0
                    });
                    if (authorStatus) {
                        $("#author-status").toggle();
                    }

                    /*socket.on('connecting', function () {
                        systemMsg('Соединение...');
                    });*/

                    /*btnActionConfirmWork.on("click", function(e) {
                        e.preventDefault();
                        jConfirm('Can you confirm this?', 'Confirmation Dialog', function(action) {
                            //jAlert('Confirmed: ' + action, 'Confirmation Results');
                            if (action) {
                            }
                        });
                        var comment = $("#comment-text").val(), degree = $('input[name=degree]:checked').val();
                        arrOpenChat[channel].emit("request confirm work", {orderId: orderId, comment: comment, degree: degree});
                    });*/

                    function setVolumeControlButton() {
                        var volumeMsg = $.cookie('volume_msg');
                        if (volumeMsg == 1) {
                            tabs.find(".volume-off").hide();
                            tabs.find(".volume-on").show();
                        } else {
                            tabs.find(".volume-on").hide();
                            tabs.find(".volume-off").show();
                        }
                    }

                    function disconnectUser() {
                        systemMsg('system', "Отключен");
                        //var blockCountMsg = currTab.find(".chat-wrap .count-msg");
                        currTab.find(".chat-wrap .btn-send-msg").addClass('disabled');
                        //btnConfirmWork.addClass('disabled');
                        //inChat.addClass("hidden");
                    }

                    function sendMessage() {
                        var message_txt = currTab.find(".chat-wrap .message-text"), text = message_txt.val();
                        //var a = $("#message_text").val().replace(/<br>/gi,"\n");
                        //a = a.replace(/<a href=>/gi,"\n");
                        message_txt.val("");
                        if (text.length <= 0 || $.trim(text) == '') {
                            return;
                        }
                        mode = patternCheckEmail.test(text) || patternCheckPhone.test(text);
                        arrOpenChat[channel].emit("send message", {message: text, writerLogin: userLogin, userId: userId, mode: mode, responseLogin: authorLogin, orderId: orderId, channel: channel});
                    }

                    /*function clearSidebarCountRecords() {
                        blockCountMsg.html('');
                    }*/

                    function increaseCountMsg() {
                        var digCountMsg = currTab.find(".dig-count"), countMsg = digCountMsg.html();
                        countMsg++;
                        digCountMsg.html(countMsg);
                    }

                    function safe(str) {
                        //return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                        //str.replace(/\r?\n/g, '<br>');
                        //console.log($.trim(str));
                        str = $.trim(str);
                        str = filterStr(str);
                        var a = str.replace(/\n|\r\n|\r/g, "<br>"), stringArray = a.split('<br>'), str1 = "";
                        for (var i = 0; i < stringArray.length; i++) {
                            var myString = stringArray[i];
                            str1 += myString + "<br>";
                        }
                        return str1;
                    }

                    function userMsg(login, message, date_write) {
                        var m = '<div class="msg">' +
                                    '<p class="user">' + login + ':</p> ' +
                                        '<div class="message">' + safe(message) + '</div>' +
                                    '<p class="date">' + date_write + '</p>' +
                                '</div>';
                        var messages = currTab.find(".chat-wrap .messages-wrap");
                        messages.append(m).scrollTop(messages[0].scrollHeight);
                    }

                    function systemMsg(login, message, date_msg) {
                        if (!date_msg) {
                            date_msg = '';
                        }
                        var m = '<div class="msg system">' +
                                    '<p class="user">' + login + ':</p> ' +
                                        '<div class="message">' + safe(message) + '</div>' +
                                    '<p class="date">' + date_msg + '</p>' +
                                '</div>';
                        var messages = currTab.find(".chat-wrap .messages-wrap");
                        messages.append(m).scrollTop(messages[0].scrollHeight);
                    }

                    function setSidebarCountRecords(a) {
                        var blockCountMsg = currTab.find(".chat-wrap .count-msg");
                        blockCountMsg.append('<span>Кол-во сообщений: <span class="dig-count">' + a + '</span></span>');
                    }

                    function filterStr(str) {
                        var r = str.replace(patternCheckEmail, "Warning");
                        r = r.replace(patternCheckPhone, " Warning ");
                        return r;
                    }

                    function selectCurrentTab() {
                        tabs.tabs('option', 'active', getIndexById(channel));
                    }

                    function getIndexById(a) {
                        var index = -1, i = 0, tbH = tabs.find("li a"), lntb = tbH.length;
                        if (lntb > 0) {
                            for (i = 0; i < lntb; i++) {
                                o = tbH[i];
                                if (o.href.search(a) > 0) {
                                    index = i;
                                }
                            }
                        }
                        return index;
                    }

                    function setFocusOnMessageField () {
                        currTab.find(".chat-wrap .message-text").focus();
                    }

                    function getChannel(row) {
                        var authorId = row.find('td:last')[0].innerHTML;
                        return authorId + '_' + userId;
                    }



                    //document.title = "Просмотр заказа №" + {{ obj.order.num }};
                    $.fn.button.noConflict();
                    var grid  = $("#listBids");
                    grid.jqGrid({
                        url: {{ path('secure_client_order', { num: obj.order.num }) | json_encode | raw }},
                        datatype: 'json',
                        mtype: 'POST',
                        rownumbers: true,
                        gridview: true,
                        rownumWidth: 40,
                        recordtext: "Просмотр ставок {0} - {1}",
                        colNames:['','Автор','Сумма','Дней на выполнение','В срок заказчика','Комментарий','Дата ставки','Действия','',''],
                        colModel :[
                            {name:'id',index:'id',hidden:true},
                            {name:'author',index:'author',width:120,align:'center',resizable:false,editable:false,sortable:false},
                            {name:'sum',index:'sum',width:150,align:'center',resizable:false,editable:false,formatter:'currency',formatoptions:{thousandsSeparator: " ",decimalPlaces:0,suffix:" руб."}},
                            {name:'day',index:'day',width:170,align:'center',resizable:false,editable:false,formatter:customDay},
                            {name:'is_client_date',index:'is_client_date',width:150,align:'center',resizable:false,editable:false,formatter:statusDate,sortable:false},
                            {name:'comment',index:'comment',width:250,align:'center',resizable:false,editable:false,sortable:false},
                            {name:'date_bid',index:'date_bid',width:150,align:'center',resizable:false,editable:false,sortable:false},
                            {name:'action',index:'action',width:150,align:'center',sortable:false,resize:false,formatter:function() {
                                return "<div class='cancel-bid' style='margin-left:8px;'>" +
                                        "<div style='float:left;margin-left:8px;' class='ui-pg-div ui-inline-del' title='Отменить выбранную ставку' onmouseover=\"$(this).tooltip('show')\" data-toggle='tooltip' data-placement='top'>" +
                                        "<span class='icon-cancel-6'></span></div></div>" +
                                        "<div class='confirm-bid' style='margin-left:8px;'>" +
                                        "<div style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' title='Принять ставку автора' onmouseover=\"$(this).tooltip('show')\" data-toggle='tooltip' data-placement='top'>" +
                                        "<span class='icon-ok-5'></span></div></div>" +
                                        "<div class='hide-bid' style='margin-left:8px;'>" +
                                        "<div style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' title='Скрыть ставку автора' onmouseover=\"$(this).tooltip('show')\" data-toggle='tooltip' data-placement='top'>" +
                                        "<span class='icon-eye'></span></div></div>" +
                                        "<div class='auction-bid' style='margin-left:8px;'>" +
                                        "<div style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' title='Предложить торг автору' onmouseover=\"$(this).tooltip('show')\" data-toggle='tooltip' data-placement='top'>" +
                                        "<span class='icon-hammer'></span></div></div>" +
                                        "<div class='open-chat' style='margin-left:8px;'>" +
                                        "<div style='float:left;margin-left:5px;' class='ui-pg-div ui-inline-del' title='Открыть чат с автором' onmouseover=\"$(this).tooltip('show')\" data-toggle='tooltip' data-placement='top'>" +
                                        "<span class='icon-chat-5'></span></div></div>";
                            }},
                            {name:'is_author_select',index:'is_author_select',hidden:true},
                            {name:'author_id',index:'author_id',hidden:true}
                        ],
                        pager: $('#pagerBids'),
                        rowNum: 15,
                        rowList: [15,25,35],
                        viewrecords: true,
                        hidegrid: false,
                        caption: 'Таблица ставок авторов',
                        height: '200',
                        emptyrecords: "Нет ставок авторов",
                        altRows: true,
                        altclass:'alt-row',
                        loadComplete : function(data) {
                            grid.find("tr").find("td").removeAttr('title');
                            var confirmBid = $(".confirm-bid");
                            $(".open-chat").on('click', function(e) {
                                var /*rowId = getRowId(e),*/
                                        row = getRow($(this)),
                                        authorId = row.find('td:last')[0].innerHTML,
                                        authorLogin = row.find('td').eq(2).find('a')[0].innerHTML;
                                //console.log(authorLogin);
                                channel = authorId + '_' + userId;
                                console.log(channel);
                                try {
                                   // console.log(arrUsedChat);
                                    if (arrUsedChat[channel] != channel) {
                                        arrUsedChat[channel] = channel;
                                        arrOpenChat[channel] = io.connect('http://localhost:8008', { /*'auto connect':false, */'forceNew':true/*, 'reconnect':false/*, 'multiplex':false*/});
                                    } else {
                                        selectCurrentTab();
                                    }
                                } catch(e) {
                                    //systemMsg('system', "Server off " + e);
                                    return;
                                }
                                console.log(arrOpenChat);
                                arrOpenChat[channel].on("connect", function() {
                                    // messages.html('');
                                    //  clearSidebarCountRecords();
                                    this.emit("get all messages", {orderId: orderId, authorId: authorId, userId: userId})
                                            .emit("join to room", {room: channel, clientLogin: userLogin, authorLogin: authorLogin});
                                    addTab(channel, authorLogin);
                                    currTab = tabs.find("#" + channel);
                                    currTab.find(".chat-wrap .btn-send-msg").removeClass('disabled').on("click", function() {
                                        sendMessage();
                                    });
                                    setVolumeControlButton();
                                    setFocusOnMessageField();
                                    currTab.find(".chat-wrap .volume-on").on("click", function() {
                                        $.cookie('volume_msg', '0');
                                        setVolumeControlButton();
                                    });
                                    currTab.find(".chat-wrap .volume-off").on("click", function() {
                                        $.cookie('volume_msg', '1');
                                        setVolumeControlButton();
                                    });
                                    //console.log(currTab.find(".chat-wrap .message-text"));
                                    currTab.find(".chat-wrap .message-text").on("keydown", function(e) {
                                        if (e.keyCode === 13 && e.ctrlKey) {
                                            sendMessage();
                                        }
                                    }).on("input", function(e) {
                                        arrOpenChat[channel].emit("request user write");
                                    })/*.on("focusin", function(e) {
                                        alert('yo');
                                    })*/;
                                    //  btnConfirmWork.removeClass('disabled');
                                }).on("response get all messages", function(data) {
                                    var countRows = 0;
                                    //console.log(data);
                                    for (var key in data) {
                                        if (data[key].user_id != 17) {
                                            userMsg(data[key].user_login, data[key].message, data[key].date_write);
                                            countRows++;
                                        } else {
                                            systemMsg(data[key].user_login, data[key].message, data[key].date_write);
                                        }
                                    }
                                    setSidebarCountRecords(countRows);
                                    setFocusOnMessageField();
                                }).on("disconnect", function() {
                                    //disconnectUser();
                                }).on("response view current online", function() {
                                    currTab.find(".chat-wrap .in-chat").removeClass("hidden");
                                }).on("response user write", function() {
                                    if (flagIsWriting == 0) {
                                        var msg = '<div class="msg system msg-writing" style="display: none"><p>Печатает...</p></div>';
                                        $(".chat-wrap .is-writing").append(msg);
                                        $(".chat-wrap .msg-writing").fadeIn("slow", function() {
                                            flagIsWriting = 1;
                                        });
                                        setTimeout(function() {
                                            $(".chat-wrap .msg-writing").fadeOut("slow", function() {
                                                $(this).remove();
                                                flagIsWriting = 0;
                                            });
                                        }, 2000);
                                    }
                                }).on("user in room", function() {
                                    //console.dir(data);
                                    currTab.find(".chat-wrap .in-chat").removeClass("hidden");
                                    arrOpenChat[channel].emit("request view current online");
                                }).on("show new message", function(data) {
                                    //console.dir(data);
                                    if ($.cookie('volume_msg') == 1 && data.user_login != userLogin) {
                                        ion.sound.play("button_tiny");
                                    }
                                    userMsg(data.user_login, data.message, data.date_write);
                                    increaseCountMsg();
                                    //setFocusOnMessageField();
                                }).on("show system message", function(data) {
                                    if ($.cookie('volume_msg') == 1) {
                                        ion.sound.play("button_tiny");
                                    }
                                    systemMsg(data.login, data.message, data.date_msg);
                                }).on("response disconnect user", function() {
                                    currTab.find(".chat-wrap .in-chat").addClass("hidden");
                                    //disconnectUser();
                                });
                            });
                            $(".cancel-bid").on('click', function(e) {
                                var rowId = getRowId(e), row = getRow($(this));
                                if (rowId) {
                                    e.preventDefault();
                                    jConfirm('Can you cancel confirmed bid?', 'Confirmation Dialog', function (action) {
                                        if (action) {
                                            var ch = getChannel(row);
                                            if (arrUsedChat[ch] != ch) {
                                                channel = ch;
                                                try {
                                                    arrUsedChat[channel] = channel;
                                                    arrOpenChat[channel] = io.connect('http://localhost:8008', { forceNew: true});
                                                } catch(e) {
                                                    return;
                                                }
                                                arrOpenChat[channel].on("connect", function() {
                                                    this.emit("join to room", {room: channel, clientLogin: userLogin, authorLogin: authorLogin})
                                                            .emit("request cancel author bid", {bidId: rowId, orderId: orderId, responseLogin: authorLogin, channel: channel});
                                                }).on("response cancel author bid", function() {
                                                    actionCancelBid(row, "hide");
                                                    $("tr.jqgrow#" + rowId).removeClass("state-selected");
                                                    confirmBid.show();
                                                    this.disconnect();
                                                    delete arrUsedChat[channel];
                                                    delete arrOpenChat[channel];
                                                });
                                            } else {
                                                //this.disconnect();
                                                arrOpenChat[channel].emit("request cancel author bid", {bidId: rowId, orderId: orderId, responseLogin: authorLogin, channel: channel})
                                                        .on("response cancel author bid", function() {
                                                            actionCancelBid(row, "hide");
                                                            $("tr.jqgrow#" + rowId).removeClass("state-selected");
                                                            confirmBid.show();
                                                        });
                                            }
                                        }
                                    });
                                }
                            });
                            $(".hide-bid").on('click', function(e) {
                                var rowId = getRowId(e), row = getRow($(this));
                                //console.log(ch);
                                if (rowId) {
                                    var ch = getChannel(row);
                                    if (arrUsedChat[ch] != ch) {
                                        channel = ch;
                                        try {
                                            arrUsedChat[channel] = channel;
                                            arrOpenChat[channel] = io.connect('http://localhost:8008', { forceNew: true});
                                        } catch(e) {
                                            return;
                                        }
                                        arrOpenChat[channel].on("connect", function() {
                                            this.emit("join to room", {room: channel, clientLogin: userLogin, authorLogin: authorLogin});
                                            this.emit("request hide bid", {bidId: rowId});
                                        }).on("response hide bid", function() {
                                            grid.delRowData(rowId);
                                            this.disconnect();
                                            delete arrUsedChat[channel];
                                        });
                                    } else {
                                        arrOpenChat[channel].emit("request hide bid", {bidId: rowId});
                                        arrOpenChat[channel].on("response hide bid", function() {
                                            grid.delRowData(rowId);
                                            this.disconnect();
                                            delete arrUsedChat[channel];
                                            delete arrOpenChat[channel];
                                            tabs.find("li[aria-controls='" + channel + "']").remove();
                                            currTab.remove();
                                            tabs.tabs("refresh");
                                        });
                                    }
                                }
                            });
                            $(".auction-bid").on('click', function(e) {
                                var rowId = getRowId(e), row = getRow($(this));
                                if (rowId) {
                                    var ch = getChannel(row),
                                            auctionPrice = $("#auction-price"),
                                            auctionDay = $("#auction-day"),
                                            btnAuctionBidConfirm = $("#btn-auction-bid-confirm"),
                                            modalAuctionBid = $('#modal-auction-bid');
                                    modalAuctionBid.modal().on('hidden.bs.modal', function () {
                                        auctionDay.val("").removeClass('bootstrap-error').tooltip('hide');
                                        auctionPrice.val("").removeClass('bootstrap-error').tooltip('hide');
                                    });
                                    auctionPrice.maxlength({
                                        alwaysShow: true
                                    }).priceFormat({
                                        prefix: '',
                                        centsSeparator: '',
                                        thousandsSeparator: ' ',
                                        centsLimit: 0,
                                        clearOnEmpty: true
                                    });
                                    auctionDay.maxlength({
                                        alwaysShow: true
                                    });
                                    btnAuctionBidConfirm.on('click', function() {
                                        var error = false;
                                        auctionDay.removeClass('bootstrap-error');
                                        auctionPrice.removeClass('bootstrap-error');
                                        if (!isNormalInteger(auctionPrice.val())) {
                                            error = true;
                                            auctionPrice.addClass('bootstrap-error').tooltip('show');
                                        } else {
                                            auctionPrice.removeClass('bootstrap-error').tooltip('hide');
                                        }
                                        if (!isNormalInteger(auctionDay.val())) {
                                            error = true;
                                            auctionDay.addClass('bootstrap-error').tooltip('show');
                                        } else {
                                            auctionDay.removeClass('bootstrap-error').tooltip('hide');
                                        }
                                        if (!error) {
                                            if (arrUsedChat[ch] != ch) {
                                                channel = ch;
                                                try {
                                                    arrUsedChat[channel] = channel;
                                                    arrOpenChat[channel] = io.connect('http://localhost:8008', { forceNew: true});
                                                } catch(e) {
                                                    return;
                                                }
                                                arrOpenChat[channel].on("connect", function() {
                                                    this.emit("join to room", {room: channel, clientLogin: userLogin, authorLogin: authorLogin})
                                                            .emit("request auction bid", {orderId: orderId, price: auctionPrice.val(), day: auctionDay.val(), authorLogin: authorLogin});
                                                }).on("response auction bid", function() {
                                                    this.disconnect();
                                                    delete arrUsedChat[channel];
                                                    delete arrOpenChat[channel];
                                                    modalAuctionBid.modal('hide');
                                                });
                                            } else {
                                                arrOpenChat[channel].emit("request auction bid", {orderId: orderId, price: auctionPrice.val(), day: auctionDay.val(), authorLogin: authorLogin})
                                                        .on("response auction bid", function() {
                                                            modalAuctionBid.modal('hide');
                                                        });
                                            }
                                        }
                                    });
                                }
                            });
                            confirmBid.on('click', function(e) {
                                var rowId = getRowId(e), row = getRow($(this));
                                if (rowId) {
                                    e.preventDefault();
                                    jConfirm('Can you confirm this bid?', 'Confirmation Dialog', function (action) {
                                        //jAlert('Confirmed: ' + action, 'Confirmation Results');
                                        if (action) {
                                            var ch = getChannel(row), authorLogin = row.find('td').eq(2).find('a')[0].innerHTML;
                                            if (arrUsedChat[ch] != ch) {
                                                channel = ch;
                                                try {
                                                    arrUsedChat[channel] = channel;
                                                    arrOpenChat[channel] = io.connect('http://localhost:8008', { forceNew: true});
                                                } catch(e) {
                                                    return;
                                                }
                                                arrOpenChat[channel].on("connect", function() {
                                                    this.emit("join to room", {room: channel, clientLogin: userLogin});
                                                    this.emit("request confirm author bid", {bidId: rowId, orderId: orderId, responseLogin: authorLogin, channel: channel});
                                                }).on("response confirm author bid", function() {
                                                    actionCancelBid(row, "show");
                                                    $("tr.jqgrow#" + rowId).addClass("state-selected");
                                                    this.disconnect();
                                                    delete arrOpenChat[channel];
                                                    delete arrUsedChat[channel];
                                                    /*something doing - open current chat or redirect*/
                                                });
                                            } else {
                                                arrOpenChat[channel].emit("request confirm author bid", {bidId: rowId, orderId: orderId, responseLogin: authorLogin, channel: channel})
                                                    .on("response confirm author bid", function() {
                                                        actionCancelBid(row, "show");
                                                        $("tr.jqgrow#" + rowId).addClass("state-selected");
                                                        /*something doing - open current chat or redirect*/
                                                    });
                                            }
                                        }
                                    });
                                }
                            });
                            var grids = grid.getDataIDs(), gridsLength = grids.length;
                            for (var i = 0; i < gridsLength; i++) {
                                if (grid.getCell(grids[i], "is_author_select") == 1) {
                                    var selectedRowBid = $("tr.jqgrow#" + grids[i]);
                                    selectedRowBid.addClass("state-selected");
                                    var blockAuctionBid = selectedRowBid.find(".auction-bid"),
                                            blockCancelBid = selectedRowBid.find(".cancel-bid"),
                                            blockConfirmBid = selectedRowBid.find(".confirm-bid");
                                    blockConfirmBid.hide();
                                    blockAuctionBid.hide();
                                    blockCancelBid.show();
                                    confirmBid.hide();
                                    break;
                                }
                            }
                        }
                    }).navGrid('#pagerBids',{view:false,search:false,del:false,add:false,edit:false,refresh:true,refreshtext:'Обновить'},{},{},{},{},{}
                    );
                    function getRowId(e) {
                        var $td = $(e.target).closest('td'),
                                $tr = $td.closest('tr.jqgrow'),
                                rowId = $tr.attr('id');
                        return rowId;
                    }
                    function getRow(a) {
                        return a.parent().parent();
                    }
                    function actionCancelBid(a, type) {
                        var blockAuctionBid = a.find(".auction-bid"),
                                blockCancelBid = a.find(".cancel-bid"),
                                blockConfirmBid = a.find(".confirm-bid");
                        if (type == "show") {
                            blockConfirmBid.hide();
                            blockAuctionBid.hide();
                            blockCancelBid.show();
                        } else {
                            blockConfirmBid.show();
                            blockAuctionBid.show();
                            blockCancelBid.hide();
                        }
                    }
                    function statusDate(cellvalue) {
                        if (cellvalue == "1") {
                            return ("<span class='icon-check-1'></span>");
                        }
                        return ("<span class='icon-minus-1'></span>");
                    }
                    function customDay(cellvalue) {
                        if (cellvalue != 0) {
                            return ("<span class='grid-cell-day'>" + cellvalue + "</span>");
                        }
                        return ("");
                    }
                    function isNormalInteger(str) {
                        str = str.replace(/\s/g, "");
                        return /^[1-9]\d*$/.test(str);
                    }
                    /*function closeMessage(el) {
                        el.addClass('is-hidden').css({'display':'none'});
                    }
                    $('.js-messageClose').on('click', function(e) {
                        closeMessage($(this).closest('.Message'));
                    });*/
                });
            </script>
        </div>
    {% endblock %}